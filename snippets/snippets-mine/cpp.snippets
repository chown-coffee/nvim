# #include snippet
snippet h_i "#include snippet" b
#include <${1:library}>
endsnippet

# #include snippet custom
snippet h_in "#include snippet custom" b
#include "${1:library}.h"
endsnippet

# #if snippet
snippet h_if "#if snippet" b
#if ${1:...}
$2
#endif
endsnippet

# #define snippet
snippet h_d "#define snippet" b
#define ${1:...}
endsnippet

# simple c project scope
snippet c_s "C project scope" b
int
main (int argc, char *argv[])
{
	$2

	${1:return 0;}
}
endsnippet

snippet c_sc "C project scope complete" b
#include <iostream>


int
main (int argc, char *argv[])
{
	$2

	${1:return 0;}
}
endsnippet

# simple c library scope
snippet h_s "C library scope" b
#ifndef _${1:LIBNAME}_H_
#define _${2:$1}_H_

$3

#endif
endsnippet

# simple CPP library implementation scope
snippet ch_s "Cpp implementation for a library" b
#include <iostream>

#include "${1:libname}.h"

$2
endsnippet

# printf scope
snippet c_o "std::cout" b
std::cout << ${1:...};
endsnippet

# scanf scope
snippet c_i "std::cin" b
std::cin >> ${1:...};
endsnippet

# general scope for function
snippet c_fn "Cpp function scope" b
${1:T}
${2:func_name} (${3:...})
{
	return ${4:T}:
}
endsnippet

# general function scope only
snippet c_fn "Cpp function scope only" b
${1:T}
${2:func_name} (${3:...});
endsnippet

# method scope
snippet c_me "Cpp method scope" b
void
${1:method_name} (${2:...})
{
	${3}
}
endsnippet

# method scope only
snippet c_mes "Cpp method scope only" b
void
${1:method_name} (${2:...});
endsnippet

snippet c_st "Cpp struct scope" b
struct ${1:Struct_name}
{
	$2
};
endsnippet

snippet c_sti "Cpp inline struct scope" b
struct ${1:Struct_name} { $2 };
endsnippet

snippet c_tst "Cpp structure (typedef) scope" b
typedef struct ${1:Struct_name}
{
	$3
} ${2:St_name};
endsnippet

snippet c_tsti "Cpp inline structure (typedef) scope" b
typedef struct ${1:Struct_name} { $3 } ${2:St_name};
endsnippet

# macro scope
snippet c_ma "Cpp macro scope" b
${1:T}
(${2:macro_name}) (${3:...})
{
	$4
}
endsnippet

# macro scope only
snippet c_mas "Cpp macro scope only" b
${1:T}
(${2:macro_name}) (${3:...});
endsnippet

# simple scope for general function
snippet c_gfn "Cpp general function scope" b
template <class T>
${1:T}
${2:func_name} (${3:T __var})
{
	return ${4:T};
}
endsnippet

# if scope
snippet c_if "if scope" b
if (${1:...}) {
	$2
}
endsnippet

# switch case scope
snippet c_sw "switch case scope" b
switch (${1:...}) {
	case ${2:...}:
		$3
		break;
	default:
		$4
}
endsnippet

# for scope
snippet c_f "for scope" b
for (${1:INIT}; ${2:COND}; ${3:INC}) {
	$4
}
endsnippet

# while scope
snippet c_w "while scope" b
while (${1:...}) {
	$2
}
endsnippet

# do_while scope
snippet c_dw "do while scope" b
do {
	$2
} while(${1:...});
endsnippet
